# GARCH(1,1) using ARIMA (p,0,q). Uses AIC to get ARMA(p,q)
# Installing / Loading the packages

#install.packages(c("tidyverse", 
#                 "neuralnet",
#                 "plotly",
#                 "quantmod",
#                 "forecast",
#                 "aTSA",
#                 "TSA",
#                 "rugarch"))

c(library(tidyverse), 
  library(neuralnet), 
  library(plotly),
  library(quantmod),
  library(forecast),
  library(aTSA),
  library(TSA),
  library(rugarch))

Currency_Pick <- readline(prompt="Currency Quote: ")

Chosen_Currency <- getSymbols(Symbols = Currency_Pick,
                    periodicity = "daily",
                    src = "yahoo",
                    auto.assign = FALSE)

df <- data.frame(Chosen_Currency[,4])
df <- na.omit(df)

# Log returns function
Ln_Norm <- function(x){
  return (log(x/lag(x)))
}

# Applies the function to the dataset and gets rid of our first row (this value == NaN)
df_Norm <- as.data.frame(lapply(df, Ln_Norm))
df_Norm <- df_Norm[2:(nrow(df_Norm)),]
df_Norm <- data.frame(df_Norm)

# Creating the ARIMA (Closing Data)
ARIMA_Currency <- auto.arima(df_Norm[,1])

Chosen_ARMA_Models <- matrix(c( ARIMA_Currency[["arma"]][1], ARIMA_Currency[["arma"]][2]),
                             nrow = 2)

rownames(Chosen_ARMA_Models) <- c("AR(P)",
                                  "MA(Q)")
colnames(Chosen_ARMA_Models) <- Currency_Pick

# Testing Normality using Augmented Dicky-Fuller & PP -> If the pval is less than 0.05, the data is stationary.
# Testing for normality within residuals.

# ADF Test. If alpha < 5% then your data == normal.
stationary.test(ARIMA_Currency$residuals)


# Building the GARCH Model

{
  
  GARCH_Model_Currency <- ugarchfit(data = df_Norm, 
                                 spec = ugarchspec(mean.model = list(armaOrder = c(ARIMA_Currency[["arma"]][1], ARIMA_Currency[["arma"]][2])),
                                                   variance.model = list(model = 'apARCH', garchOrder = c(1,1))),
                                 solver = 'hybrid')
  
  GARCH_Fitted_Currency <- GARCH_Model_Currency@fit[["fitted.values"]]
  
}

# Getting the upper and lower bounds (this is +/- 2 sigma from the mean)

{
  
  n_ahead <- 1
  GARCH_Mean_Currency_forecast <- ugarchforecast(GARCH_Model_Currency, n.ahead = n_ahead)@forecast[["seriesFor"]]
  GARCH_Sigma_Currency_forecast <- ugarchforecast(GARCH_Model_Currency, n.ahead = n_ahead)@forecast[["sigmaFor"]]
  GARCH_Fitted_Sigma <- data.frame(GARCH_Lower_Sigma = fitted(GARCH_Model_Currency) - (2 * sigma(GARCH_Model_Currency)), 
                                   GARCH_Upper_Sigma = fitted(GARCH_Model_Currency) + (2 * sigma(GARCH_Model_Currency)))
}

# Forecast Numbers (use only if the model > 60% accuracy + has an ARMA(p,q) > 0. )

{
  
  GARCH_Results_Matrix <- matrix(c(
    df[nrow(df),1] * (1 + (GARCH_Mean_Currency_forecast + (2 * GARCH_Sigma_Currency_forecast))), # df[nrow(df),1] * (1 + (GARCH_Mean_Currency_forecast + (2 * GARCH_Sigma_Currency_forecast))) In case you want actual values.
    df[nrow(df),1] * (1 + GARCH_Mean_Currency_forecast), 
    df[nrow(df),1] * (1 +(GARCH_Mean_Currency_forecast - (2 * GARCH_Sigma_Currency_forecast))), 
    ((GARCH_Mean_Currency_forecast + (2 * GARCH_Sigma_Currency_forecast))), # df[nrow(df),1] * (1 + (GARCH_Mean_Currency_forecast + (2 * GARCH_Sigma_Currency_forecast))) In case you want actual values.
    (GARCH_Mean_Currency_forecast), 
    ((GARCH_Mean_Currency_forecast - (2 * GARCH_Sigma_Currency_forecast)))),
    nrow = 3
  )
  
  
  rownames(GARCH_Results_Matrix) <- c("Upper Bound (T+1)",
                                      "GARCH Mean (T+1)",
                                      "Lower Bound (T+1)")
  
  colnames(GARCH_Results_Matrix) <- c(Currency_Pick, "Direction")
  
}


# Testing the results on the full dataset

{
  Full_accuracy_Currency <- data.frame(actual = df_Norm[,1], ARMA_predction = ARIMA_Currency$fitted, GARCH_prediction = GARCH_Fitted_Currency)
  
}

for (i in 1:nrow(Full_accuracy_Currency)) {
  if( Full_accuracy_Currency$GARCH_prediction[i] > 0 && Full_accuracy_Currency$actual[i] > 0 ){
    Full_accuracy_Currency$iftrueGARCH[i] <- 1
  } else if( Full_accuracy_Currency$GARCH_prediction[i] < 0 && Full_accuracy_Currency$actual[i] < 0 ) {
    Full_accuracy_Currency$iftrueGARCH[i] <- 1 
  } else {
    Full_accuracy_Currency$iftrueGARCH[i] <- 0
  }
}

{
  
  Currency_Accuracy_Percentage_GARCH <- Full_accuracy_Currency %>% 
    summarise(GARCH_Percentage = sum(Full_accuracy_Currency$iftrueGARCH / nrow(Full_accuracy_Currency)) * 100)
  
}

All_Accuracy_Percentage <- matrix(c(Currency_Accuracy_Percentage_GARCH$GARCH_Percentage, nrow(df)),
                                  nrow = 2)

rownames(All_Accuracy_Percentage) <- c("Garch % Chance",
                                       "Sample Size")
colnames(All_Accuracy_Percentage) <- c(Currency_Pick)

# Flow of this is that you look at accuracy first. IF accuracy > 60%, you look at the ARMA process. If ARMA(P,Q) > 0, you look at the GARCH Results.


Currency_Chart <- ggplot() + 
  geom_line(data = Full_accuracy_Currency, mapping = aes(x = 1:nrow(Full_accuracy_Currency), y = Full_accuracy_Currency[,1], color = 'Actual'), size = 1, alpha = 0.35) + 
  geom_line(data = Full_accuracy_Currency, mapping = aes(x = 1:nrow(Full_accuracy_Currency), y = Full_accuracy_Currency[,3], color = 'GARCH')) +
  geom_line(data = GARCH_Fitted_Sigma, mapping = aes(x = 1:nrow(Full_accuracy_Currency), y = GARCH_Fitted_Sigma[,1], color = 'GARCH_Bound')) +
  geom_line(data = GARCH_Fitted_Sigma, mapping = aes(x = 1:nrow(Full_accuracy_Currency), y = GARCH_Fitted_Sigma[,2], color = 'GARCH_Bound')) +
  ggtitle("GARCH", as.character(Currency_Pick)) +
  xlab("Number of Periods") + 
  ylab("LN Percentage Return") + theme_classic() + 
  scale_color_manual(name = "Legend", 
                     values = c("Actual" = "green", "GARCH" = "blue", "GARCH_Bound" = "red"))

print("Remember, the over/under means that the actual number is % over or under than this number")
print(All_Accuracy_Percentage)
print(Chosen_ARMA_Models)
print(GARCH_Results_Matrix)
print(Currency_Chart)

print(jarque.bera.test(GARCH_Model_Currency@fit[["residuals"]]))


# This section is to see how well the model will work if I put some money into the listed asset.


testing_the_model <- Full_accuracy_Currency %>%
  select(-ARMA_predction)

for (i in 1:nrow(testing_the_model)) {
  if( testing_the_model$iftrueGARCH[i] > 0 ){
    testing_the_model$GARCH_prediction[i] <- abs(testing_the_model$GARCH_prediction[i])
  } else if( testing_the_model$iftrueGARCH[i] <= 0 ) {
    testing_the_model$GARCH_prediction[i] <- Full_accuracy_Currency$GARCH_prediction[i] * -1 
  }
}

testing_the_model$GARCH_cumprod <- cumprod(1 + testing_the_model$GARCH_prediction)
testing_the_model$actual_cumprod <- cumprod(1 + testing_the_model$actual)

testing_the_model_chart <- ggplot() + 
  geom_line(data = testing_the_model, mapping = aes(x = 1:nrow(testing_the_model), y = testing_the_model[,5], color = 'Buy & Hold'), size = 1, alpha = 0.35) + 
  geom_line(data = testing_the_model, mapping = aes(x = 1:nrow(testing_the_model), y = testing_the_model[,4], color = 'ARIMA / GARCH'), size = 1, alpha = 0.35) + 
  ggtitle("Model Return vs Buy & Hold", as.character(Currency_Pick)) +
  xlab("Number of Periods") + 
  ylab("Cumlative Return") + theme_classic() + 
  scale_color_manual(name = "Legend", 
                     values = c("Buy & Hold" = "green", "GARCH" = "blue", "ARIMA / GARCH" = "red"))
print(testing_the_model_chart)

